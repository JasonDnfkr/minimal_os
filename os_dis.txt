
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00001028 memsz 0x00001028 flags r-x
    LOAD off    0x00002000 vaddr 0x0000a000 paddr 0x0000a000 align 2**12
         filesz 0x00003800 memsz 0x00004000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ce  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000058  00007fd0  00007fd0  00000fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00003800  0000a000  0000a000  00002000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000800  0000d800  0000d800  00005800  2**3
                  ALLOC
  4 .comment      00000011  00000000  00000000  00005800  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00005818  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000229  00000000  00000000  00005858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000011b  00000000  00000000  00005a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000cb  00000000  00000000  00005b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000014f  00000000  00000000  00005c67  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00007fd0 l    d  .eh_frame	00000000 .eh_frame
0000a000 l    d  .data	00000000 .data
0000d800 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 start.o
00007c00 l       .text	00000000 offset
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e3c l       .text	00000000 gdt_desc
00007e42 l       .text	00000000 idt_desc
00000000 l    df *ABS*	00000000 os.c
0000b000 l     O .data	00001000 page_table
0000d000 g     O .data	00000800 gdt_table
0000a000 g     O .data	00001000 map_phy_buffer
00007e33 g       .text	00000000 timer_int
00007e67 g     F .text	00000167 os_init
00007c00 g       .text	00000000 _start
00007e48 g     F .text	0000001f outb
0000d800 g       .bss	00000000 __bss_start
0000c000 g     O .data	00001000 pg_dir
0000d800 g       .data	00000000 _edata
0000e000 g       .bss	00000000 _end
0000d800 g     O .bss	00000800 idt_table



Disassembly of section .text:

00007c00 <_start>:
 	.text

_start:
# 	jmp $0, $offset // qemu 会自动将cs设为0，也可以不用
offset:
	mov $0,	%ax
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c09:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7c0b:	8e e0                	mov    %eax,%fs

	# 分配栈空间 由于bios会将硬盘第一个扇区的内容
	# 存放至内存0x7c00中，因此将代码开头的地址
	# 也就是_start的内容放入esp就可以设置栈指针的位置
	mov $_start, %esp
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:

read_self_all:
	mov $_start_32, %bx // 0x7c00 + 512
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx    # int 0x13: 起始扇区2
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax  # 读磁盘 ah:2  al:0x40 (64个扇区)
	mov $0x80, %dx   # 读第一个磁盘
    7c1e:	00 cd                	add    %cl,%ch

	int $0x13        # 中断：读取磁盘
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all

	cli				 # 关中断
    7c23:	fa                   	cli    

	lgdt gdt_desc    # load GDT
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	3c 7e                	cmp    $0x7e,%al
	lidt idt_desc	 # load IDT
    7c29:	0f 01 1e             	lidtl  (%esi)
    7c2c:	42                   	inc    %edx
    7c2d:	7e 66                	jle    7c95 <read_self_all+0x82>
	mov $1, %eax
    7c2f:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax         # CR0 = 1
    7c34:	0f 01 f0             	lmsw   %ax

	jmp $KERNEL_CODE_SEG, $_start_32 # CS 设置为 KERNEL_CODE_SEG, 指向内核代码段
    7c37:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)

00007e00 <_start_32>:

	.code32			 # 执行32位指令
	.text

_start_32:
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss

	mov $_start, %esp
    7e0a:	bc 00 7c 00 00       	mov    $0x7c00,%esp


	call os_init
    7e0f:	e8 53 00 00 00       	call   7e67 <os_init>
	mov $pg_dir, %eax
    7e14:	b8 00 c0 00 00       	mov    $0xc000,%eax
	mov %eax, %cr3   # 分页相关
    7e19:	0f 22 d8             	mov    %eax,%cr3

	mov %cr4, %eax
    7e1c:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax
    7e1f:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e22:	0f 22 e0             	mov    %eax,%cr4

	mov %cr0, %eax
    7e25:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax
    7e28:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e2d:	0f 22 c0             	mov    %eax,%cr0

	sti # start interrupt
    7e30:	fb                   	sti    

	jmp .
    7e31:	eb fe                	jmp    7e31 <_start_32+0x31>

00007e33 <timer_int>:

timer_int:
	push %ds
    7e33:	1e                   	push   %ds
	pusha
    7e34:	60                   	pusha  
	mov $0x20, %al
    7e35:	b0 20                	mov    $0x20,%al
	outb %al, $0x20
    7e37:	e6 20                	out    %al,$0x20
	popa
    7e39:	61                   	popa   
	pop %ds
    7e3a:	1f                   	pop    %ds
	iret
    7e3b:	cf                   	iret   

00007e3c <gdt_desc>:
    7e3c:	ff 07                	incl   (%edi)
    7e3e:	00 d0                	add    %dl,%al
	...

00007e42 <idt_desc>:
    7e42:	ff 07                	incl   (%edi)
    7e44:	00 d8                	add    %bl,%al
	...

00007e48 <outb>:
} gdt_table[256] __attribute__((aligned(8))) = {
    [KERNEL_CODE_SEG / 8] = { 0xffff, 0x0000, 0x9a00, 0x00cf },
    [KERNEL_DATA_SEG / 8] = { 0xffff, 0x0000, 0x9200, 0x00cf },
};

void outb(uint8_t data, uint16_t port) {
    7e48:	55                   	push   %ebp
    7e49:	89 e5                	mov    %esp,%ebp
    7e4b:	83 ec 08             	sub    $0x8,%esp
    7e4e:	8b 55 08             	mov    0x8(%ebp),%edx
    7e51:	8b 45 0c             	mov    0xc(%ebp),%eax
    7e54:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7e57:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    7e5b:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7e5f:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7e63:	ee                   	out    %al,(%dx)
}
    7e64:	90                   	nop
    7e65:	c9                   	leave  
    7e66:	c3                   	ret    

00007e67 <os_init>:

void timer_int(void);
 
#define TEST_ADDR 0x70000000
#define TEST_ADDR_2 0x12345678
void os_init(void) {
    7e67:	55                   	push   %ebp
    7e68:	89 e5                	mov    %esp,%ebp
    7e6a:	83 ec 10             	sub    $0x10,%esp
    // 对定时器硬件进行配置，使得CPU只接收时钟中断
    // 初始化8259中断控制器，打开定时器中断
    outb(0x11, 0x20);       // 开始初始化主芯片
    7e6d:	6a 20                	push   $0x20
    7e6f:	6a 11                	push   $0x11
    7e71:	e8 d2 ff ff ff       	call   7e48 <outb>
    7e76:	83 c4 08             	add    $0x8,%esp
    outb(0x11, 0xA0);       // 初始化从芯片
    7e79:	68 a0 00 00 00       	push   $0xa0
    7e7e:	6a 11                	push   $0x11
    7e80:	e8 c3 ff ff ff       	call   7e48 <outb>
    7e85:	83 c4 08             	add    $0x8,%esp
    outb(0x20, 0x21);       // 写ICW2，告诉主芯片中断向量从0x20开始
    7e88:	6a 21                	push   $0x21
    7e8a:	6a 20                	push   $0x20
    7e8c:	e8 b7 ff ff ff       	call   7e48 <outb>
    7e91:	83 c4 08             	add    $0x8,%esp
    outb(0x28, 0xa1);       // 写ICW2，告诉从芯片中断向量从0x28开始
    7e94:	68 a1 00 00 00       	push   $0xa1
    7e99:	6a 28                	push   $0x28
    7e9b:	e8 a8 ff ff ff       	call   7e48 <outb>
    7ea0:	83 c4 08             	add    $0x8,%esp
    outb((1 << 2), 0x21);   // 写ICW3，告诉主芯片IRQ2上连接有从芯片
    7ea3:	6a 21                	push   $0x21
    7ea5:	6a 04                	push   $0x4
    7ea7:	e8 9c ff ff ff       	call   7e48 <outb>
    7eac:	83 c4 08             	add    $0x8,%esp
    outb(2, 0xa1);          // 写ICW3，告诉从芯片连接g到主芯片的IRQ2上
    7eaf:	68 a1 00 00 00       	push   $0xa1
    7eb4:	6a 02                	push   $0x2
    7eb6:	e8 8d ff ff ff       	call   7e48 <outb>
    7ebb:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0x21);        // 写ICW4，告诉主芯片8086、普通EOI、非缓冲模式
    7ebe:	6a 21                	push   $0x21
    7ec0:	6a 01                	push   $0x1
    7ec2:	e8 81 ff ff ff       	call   7e48 <outb>
    7ec7:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0xa1);        // 写ICW4，告诉主芯片8086、普通EOI、非缓冲模式
    7eca:	68 a1 00 00 00       	push   $0xa1
    7ecf:	6a 01                	push   $0x1
    7ed1:	e8 72 ff ff ff       	call   7e48 <outb>
    7ed6:	83 c4 08             	add    $0x8,%esp
    outb(0xfe, 0x21);       // 开定时中断，其它屏蔽
    7ed9:	6a 21                	push   $0x21
    7edb:	68 fe 00 00 00       	push   $0xfe
    7ee0:	e8 63 ff ff ff       	call   7e48 <outb>
    7ee5:	83 c4 08             	add    $0x8,%esp
    outb(0xff, 0xa1);       // 屏蔽所有中断
    7ee8:	68 a1 00 00 00       	push   $0xa1
    7eed:	68 ff 00 00 00       	push   $0xff
    7ef2:	e8 51 ff ff ff       	call   7e48 <outb>
    7ef7:	83 c4 08             	add    $0x8,%esp

    int tmo = 1193180 / 100;
    7efa:	c7 45 fc 9b 2e 00 00 	movl   $0x2e9b,-0x4(%ebp)
    outb(0x36, 0x43);               // 二进制计数、模式3、通道0
    7f01:	6a 43                	push   $0x43
    7f03:	6a 36                	push   $0x36
    7f05:	e8 3e ff ff ff       	call   7e48 <outb>
    7f0a:	83 c4 08             	add    $0x8,%esp
    outb((uint8_t)tmo, 0x40);
    7f0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7f10:	0f b6 c0             	movzbl %al,%eax
    7f13:	6a 40                	push   $0x40
    7f15:	50                   	push   %eax
    7f16:	e8 2d ff ff ff       	call   7e48 <outb>
    7f1b:	83 c4 08             	add    $0x8,%esp
    outb(tmo >> 8, 0x40);    
    7f1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7f21:	c1 f8 08             	sar    $0x8,%eax
    7f24:	0f b6 c0             	movzbl %al,%eax
    7f27:	6a 40                	push   $0x40
    7f29:	50                   	push   %eax
    7f2a:	e8 19 ff ff ff       	call   7e48 <outb>
    7f2f:	83 c4 08             	add    $0x8,%esp
    
    idt_table[0x20].offset_l = (uint32_t)timer_int & 0xffff;
    7f32:	b8 33 7e 00 00       	mov    $0x7e33,%eax
    7f37:	66 a3 00 d9 00 00    	mov    %ax,0xd900
    idt_table[0x20].offset_h = (uint32_t)timer_int >> 16;
    7f3d:	b8 33 7e 00 00       	mov    $0x7e33,%eax
    7f42:	c1 e8 10             	shr    $0x10,%eax
    7f45:	66 a3 06 d9 00 00    	mov    %ax,0xd906
    idt_table[0x20].selector = KERNEL_CODE_SEG;
    7f4b:	66 c7 05 02 d9 00 00 	movw   $0x8,0xd902
    7f52:	08 00 
    idt_table[0x20].attr     = 0x8e00;
    7f54:	66 c7 05 04 d9 00 00 	movw   $0x8e00,0xd904
    7f5b:	00 8e 


    pg_dir[MAP_ADDR >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    7f5d:	b8 00 b0 00 00       	mov    $0xb000,%eax
    7f62:	83 c8 07             	or     $0x7,%eax
    7f65:	a3 00 c8 00 00       	mov    %eax,0xc800
    page_table[(MAP_ADDR >> 12) & 0x3ff] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    7f6a:	b8 00 a0 00 00       	mov    $0xa000,%eax
    7f6f:	83 c8 07             	or     $0x7,%eax
    7f72:	a3 00 b0 00 00       	mov    %eax,0xb000
    
    pg_dir[TEST_ADDR >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    7f77:	b8 00 b0 00 00       	mov    $0xb000,%eax
    7f7c:	83 c8 07             	or     $0x7,%eax
    7f7f:	a3 00 c7 00 00       	mov    %eax,0xc700
    page_table[(TEST_ADDR >> 12) & 0x3ff] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    7f84:	b8 00 a0 00 00       	mov    $0xa000,%eax
    7f89:	83 c8 07             	or     $0x7,%eax
    7f8c:	a3 00 b0 00 00       	mov    %eax,0xb000

    pg_dir[TEST_ADDR_2 >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    7f91:	b8 00 b0 00 00       	mov    $0xb000,%eax
    7f96:	83 c8 07             	or     $0x7,%eax
    7f99:	a3 20 c1 00 00       	mov    %eax,0xc120
    page_table[(TEST_ADDR_2 >> 12) & 0x3ff] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    7f9e:	b8 00 a0 00 00       	mov    $0xa000,%eax
    7fa3:	83 c8 07             	or     $0x7,%eax
    7fa6:	a3 14 bd 00 00       	mov    %eax,0xbd14

    uint32_t addr1 = TEST_ADDR;
    7fab:	c7 45 f8 00 00 00 70 	movl   $0x70000000,-0x8(%ebp)
    *((uint32_t*)TEST_ADDR) = 66;
    7fb2:	b8 00 00 00 70       	mov    $0x70000000,%eax
    7fb7:	c7 00 42 00 00 00    	movl   $0x42,(%eax)
    map_phy_buffer[1] = 99;
    7fbd:	c6 05 01 a0 00 00 63 	movb   $0x63,0xa001
    map_phy_buffer[2] = 88;
    7fc4:	c6 05 02 a0 00 00 58 	movb   $0x58,0xa002
    7fcb:	90                   	nop
    7fcc:	c9                   	leave  
    7fcd:	c3                   	ret    
