
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x0000112c memsz 0x0000112c flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x000038ec memsz 0x00008100 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000047b  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     000000b0  0000807c  0000807c  0000107c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         000038ec  00009000  00009000  00002000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004800  0000c900  0000c900  000058ec  2**5
                  ALLOC
  4 .comment      00000011  00000000  00000000  000058ec  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00005900  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000032c  00000000  00000000  00005940  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000146  00000000  00000000  00005c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000010c  00000000  00000000  00005db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d4  00000000  00000000  00005ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
0000807c l    d  .eh_frame	00000000 .eh_frame
00009000 l    d  .data	00000000 .data
0000c900 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 start.o
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e6f l       .text	00000000 gdt_desc
00007e75 l       .text	00000000 idt_desc
00007e5f l       .text	00000000 task_0_entry
00000000 l    df *ABS*	00000000 os.c
0000a000 l     O .data	00001000 page_table
0000c8e8 l     O .data	00000004 task_tss.1769
0000c0e8 g     O .data	00000800 gdt_table
0000d100 g     O .bss	00001000 task0_dpl3_stack
0000e100 g     O .bss	00001000 task1_dpl3_stack
00007e7b g     F .text	00000016 task_0
0000c000 g     O .data	00000068 task0_tss
00009000 g     O .data	00001000 map_phy_buffer
00007e4b g       .text	00000000 timer_int
00007efe g     F .text	0000017d os_init
0000f100 g     O .bss	00001000 task1_dpl0_stack
0000c080 g     O .data	00000068 task1_tss
00007c00 g       .text	00000000 _start
00007ea7 g     F .text	0000001f outb
0000c8ec g       .bss	00000000 __bss_start
0000b000 g     O .data	00001000 pg_dir
0000c8ec g       .data	00000000 _edata
00011100 g       .bss	00000000 _end
00007e91 g     F .text	00000016 task_1
0000c900 g     O .bss	00000800 idt_table
00010100 g     O .bss	00001000 task0_dpl0_stack
00007ec6 g     F .text	00000038 task_sched



Disassembly of section .text:

00007c00 <_start>:
 	.text

_start:
# 	jmp $0, $offset // qemu 会自动将cs设为0，也可以不用
# offset:
	mov $0,	%ax
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c09:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7c0b:	8e e0                	mov    %eax,%fs

	# 分配栈空间 由于bios会将硬盘第一个扇区的内容
	# 存放至内存0x7c00中，因此将代码开头的地址
	# 也就是_start的内容放入esp就可以设置栈指针的位置
	mov $_start, %esp
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:

read_self_all:
	// 这个 _start_32 就代表了0x7e00, 不知道为什么，好像是编译器干的？
	mov $_start_32, %bx // 0x7c00 + 512 = 0x7e00 
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx    # int 0x13: 起始扇区2
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax  # 读磁盘 ah:2  al:0x40 (64个扇区)
	mov $0x80, %dx   # 读第一个磁盘
    7c1e:	00 cd                	add    %cl,%ch

	int $0x13        # 中断：读取磁盘
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all

	cli				 # 关中断
    7c23:	fa                   	cli    

	lgdt gdt_desc    # load GDT
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	6f                   	outsl  %ds:(%esi),(%dx)
    7c28:	7e 0f                	jle    7c39 <read_self_all+0x26>
	lidt idt_desc	 # load IDT
    7c2a:	01 1e                	add    %ebx,(%esi)
    7c2c:	75 7e                	jne    7cac <read_self_all+0x99>
	mov $1, %eax
    7c2e:	66 b8 01 00          	mov    $0x1,%ax
    7c32:	00 00                	add    %al,(%eax)
	lmsw %ax         # CR0 = 1 CPU从此进入保护模式
    7c34:	0f 01 f0             	lmsw   %ax

	// 跳转到 _start_32 的地址，
	// CS 设置为 KERNEL_CODE_SEG = 8, 指向内核代码段
	jmp $KERNEL_CODE_SEG, $_start_32 
    7c37:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)

00007e00 <_start_32>:
	.code32			 # 执行32位指令
	.text

_start_32:
	// 使段寄存器指向 KERNEL_DATA_SEG 的位置
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss

	mov $_start, %esp
    7e0a:	bc 00 7c 00 00       	mov    $0x7c00,%esp


	call os_init
    7e0f:	e8 ea 00 00 00       	call   7efe <os_init>
	mov $pg_dir, %eax
    7e14:	b8 00 b0 00 00       	mov    $0xb000,%eax
	mov %eax, %cr3   # 分页相关
    7e19:	0f 22 d8             	mov    %eax,%cr3

	mov %cr4, %eax
    7e1c:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax
    7e1f:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e22:	0f 22 e0             	mov    %eax,%cr4

	mov %cr0, %eax
    7e25:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax
    7e28:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e2d:	0f 22 c0             	mov    %eax,%cr0

	mov $TASK0_TSS_SEG, %ax
    7e30:	66 b8 28 00          	mov    $0x28,%ax
	ltr %ax # 修改TR寄存器 当前运行的是TASK0
    7e34:	0f 00 d8             	ltr    %ax

	# sti # start interrupt

	push $APP_DATA_SEG
    7e37:	6a 23                	push   $0x23
	push $task0_dpl3_stack + 1024 * 4
    7e39:	68 00 e1 00 00       	push   $0xe100
	push $0x202
    7e3e:	68 02 02 00 00       	push   $0x202
	push $APP_CODE_SEG
    7e43:	6a 1b                	push   $0x1b
	push $task_0_entry
    7e45:	68 5f 7e 00 00       	push   $0x7e5f

	iret
    7e4a:	cf                   	iret   

00007e4b <timer_int>:

timer_int:
	push %ds
    7e4b:	1e                   	push   %ds
	pusha
    7e4c:	60                   	pusha  
	mov $0x20, %al
    7e4d:	b0 20                	mov    $0x20,%al
	outb %al, $0x20
    7e4f:	e6 20                	out    %al,$0x20

	mov $KERNEL_DATA_SEG, %ax
    7e51:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e55:	8e d8                	mov    %eax,%ds

	call task_sched
    7e57:	e8 6a 00 00 00       	call   7ec6 <task_sched>
	
	popa
    7e5c:	61                   	popa   
	pop %ds
    7e5d:	1f                   	pop    %ds
	iret
    7e5e:	cf                   	iret   

00007e5f <task_0_entry>:


task_0_entry:
	mov %ss, %ax
    7e5f:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
    7e62:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e64:	8e c0                	mov    %eax,%es
	mov %ax, %gs
    7e66:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7e68:	8e e0                	mov    %eax,%fs
	jmp task_0
    7e6a:	e9 0c 00 00 00       	jmp    7e7b <task_0>

00007e6f <gdt_desc>:
    7e6f:	ff 07                	incl   (%edi)
    7e71:	e8                   	.byte 0xe8
    7e72:	c0 00 00             	rolb   $0x0,(%eax)

00007e75 <idt_desc>:
    7e75:	ff 07                	incl   (%edi)
    7e77:	00 c9                	add    %cl,%cl
	...

00007e7b <task_0>:

typedef unsigned char   uint8_t;
typedef unsigned short  uint16_t;
typedef unsigned int    uint32_t;

void task_0(void) {
    7e7b:	55                   	push   %ebp
    7e7c:	89 e5                	mov    %esp,%ebp
    7e7e:	83 ec 10             	sub    $0x10,%esp
    uint8_t color = 0;
    7e81:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
    while (1) {
        color--;
    7e85:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7e89:	83 e8 01             	sub    $0x1,%eax
    7e8c:	88 45 ff             	mov    %al,-0x1(%ebp)
    7e8f:	eb f4                	jmp    7e85 <task_0+0xa>

00007e91 <task_1>:
    }
}

void task_1(void) {
    7e91:	55                   	push   %ebp
    7e92:	89 e5                	mov    %esp,%ebp
    7e94:	83 ec 10             	sub    $0x10,%esp
    uint8_t color = 0xff;
    7e97:	c6 45 ff ff          	movb   $0xff,-0x1(%ebp)
    while (1) {
        color--;
    7e9b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7e9f:	83 e8 01             	sub    $0x1,%eax
    7ea2:	88 45 ff             	mov    %al,-0x1(%ebp)
    7ea5:	eb f4                	jmp    7e9b <task_1+0xa>

00007ea7 <outb>:

    [TASK0_TSS_SEG / 8] = { 0x68, 0, 0xe900, 0x0 },
    [TASK1_TSS_SEG / 8] = { 0x68, 0, 0xe900, 0x0 },
};

void outb(uint8_t data, uint16_t port) {
    7ea7:	55                   	push   %ebp
    7ea8:	89 e5                	mov    %esp,%ebp
    7eaa:	83 ec 08             	sub    $0x8,%esp
    7ead:	8b 55 08             	mov    0x8(%ebp),%edx
    7eb0:	8b 45 0c             	mov    0xc(%ebp),%eax
    7eb3:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7eb6:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    7eba:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7ebe:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7ec2:	ee                   	out    %al,(%dx)
}
    7ec3:	90                   	nop
    7ec4:	c9                   	leave  
    7ec5:	c3                   	ret    

00007ec6 <task_sched>:


void task_sched(void) {
    7ec6:	55                   	push   %ebp
    7ec7:	89 e5                	mov    %esp,%ebp
    7ec9:	83 ec 10             	sub    $0x10,%esp
    static int task_tss = TASK0_TSS_SEG;

    task_tss = (task_tss == TASK0_TSS_SEG) ? TASK1_TSS_SEG : TASK0_TSS_SEG;
    7ecc:	a1 e8 c8 00 00       	mov    0xc8e8,%eax
    7ed1:	83 f8 28             	cmp    $0x28,%eax
    7ed4:	75 07                	jne    7edd <task_sched+0x17>
    7ed6:	b8 30 00 00 00       	mov    $0x30,%eax
    7edb:	eb 05                	jmp    7ee2 <task_sched+0x1c>
    7edd:	b8 28 00 00 00       	mov    $0x28,%eax
    7ee2:	a3 e8 c8 00 00       	mov    %eax,0xc8e8

    // 偏移，选择子?? 
    uint32_t addr[] = { 0, task_tss };
    7ee7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7eee:	a1 e8 c8 00 00       	mov    0xc8e8,%eax
    7ef3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
    7ef6:	8d 45 f8             	lea    -0x8(%ebp),%eax
    7ef9:	ff 28                	ljmp   *(%eax)
}
    7efb:	90                   	nop
    7efc:	c9                   	leave  
    7efd:	c3                   	ret    

00007efe <os_init>:

void timer_int(void);
 
#define TEST_ADDR 0x70000000
#define TEST_ADDR_2 0x12345678
void os_init(void) {
    7efe:	55                   	push   %ebp
    7eff:	89 e5                	mov    %esp,%ebp
    7f01:	83 ec 10             	sub    $0x10,%esp
    // 对定时器硬件进行配置，使得CPU只接收时钟中断
    // 初始化8259中断控制器，打开定时器中断
    outb(0x11, 0x20);       // 开始初始化主芯片
    7f04:	6a 20                	push   $0x20
    7f06:	6a 11                	push   $0x11
    7f08:	e8 9a ff ff ff       	call   7ea7 <outb>
    7f0d:	83 c4 08             	add    $0x8,%esp
    outb(0x11, 0xA0);       // 初始化从芯片
    7f10:	68 a0 00 00 00       	push   $0xa0
    7f15:	6a 11                	push   $0x11
    7f17:	e8 8b ff ff ff       	call   7ea7 <outb>
    7f1c:	83 c4 08             	add    $0x8,%esp
    outb(0x20, 0x21);       // 写ICW2，告诉主芯片中断向量从0x20开始
    7f1f:	6a 21                	push   $0x21
    7f21:	6a 20                	push   $0x20
    7f23:	e8 7f ff ff ff       	call   7ea7 <outb>
    7f28:	83 c4 08             	add    $0x8,%esp
    outb(0x28, 0xa1);       // 写ICW2，告诉从芯片中断向量从0x28开始
    7f2b:	68 a1 00 00 00       	push   $0xa1
    7f30:	6a 28                	push   $0x28
    7f32:	e8 70 ff ff ff       	call   7ea7 <outb>
    7f37:	83 c4 08             	add    $0x8,%esp
    outb((1 << 2), 0x21);   // 写ICW3，告诉主芯片IRQ2上连接有从芯片
    7f3a:	6a 21                	push   $0x21
    7f3c:	6a 04                	push   $0x4
    7f3e:	e8 64 ff ff ff       	call   7ea7 <outb>
    7f43:	83 c4 08             	add    $0x8,%esp
    outb(2, 0xa1);          // 写ICW3，告诉从芯片连接g到主芯片的IRQ2上
    7f46:	68 a1 00 00 00       	push   $0xa1
    7f4b:	6a 02                	push   $0x2
    7f4d:	e8 55 ff ff ff       	call   7ea7 <outb>
    7f52:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0x21);        // 写ICW4，告诉主芯片8086、普通EOI、非缓冲模式
    7f55:	6a 21                	push   $0x21
    7f57:	6a 01                	push   $0x1
    7f59:	e8 49 ff ff ff       	call   7ea7 <outb>
    7f5e:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0xa1);        // 写ICW4，告诉主芯片8086、普通EOI、非缓冲模式
    7f61:	68 a1 00 00 00       	push   $0xa1
    7f66:	6a 01                	push   $0x1
    7f68:	e8 3a ff ff ff       	call   7ea7 <outb>
    7f6d:	83 c4 08             	add    $0x8,%esp
    outb(0xfe, 0x21);       // 开定时中断，其它屏蔽
    7f70:	6a 21                	push   $0x21
    7f72:	68 fe 00 00 00       	push   $0xfe
    7f77:	e8 2b ff ff ff       	call   7ea7 <outb>
    7f7c:	83 c4 08             	add    $0x8,%esp
    outb(0xff, 0xa1);       // 屏蔽所有中断
    7f7f:	68 a1 00 00 00       	push   $0xa1
    7f84:	68 ff 00 00 00       	push   $0xff
    7f89:	e8 19 ff ff ff       	call   7ea7 <outb>
    7f8e:	83 c4 08             	add    $0x8,%esp

    int tmo = 1193180 / 100;
    7f91:	c7 45 fc 9b 2e 00 00 	movl   $0x2e9b,-0x4(%ebp)
    outb(0x36, 0x43);               // 二进制计数、模式3、通道0
    7f98:	6a 43                	push   $0x43
    7f9a:	6a 36                	push   $0x36
    7f9c:	e8 06 ff ff ff       	call   7ea7 <outb>
    7fa1:	83 c4 08             	add    $0x8,%esp
    outb((uint8_t)tmo, 0x40);
    7fa4:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7fa7:	0f b6 c0             	movzbl %al,%eax
    7faa:	6a 40                	push   $0x40
    7fac:	50                   	push   %eax
    7fad:	e8 f5 fe ff ff       	call   7ea7 <outb>
    7fb2:	83 c4 08             	add    $0x8,%esp
    outb(tmo >> 8, 0x40);    
    7fb5:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7fb8:	c1 f8 08             	sar    $0x8,%eax
    7fbb:	0f b6 c0             	movzbl %al,%eax
    7fbe:	6a 40                	push   $0x40
    7fc0:	50                   	push   %eax
    7fc1:	e8 e1 fe ff ff       	call   7ea7 <outb>
    7fc6:	83 c4 08             	add    $0x8,%esp
    
    idt_table[0x20].offset_l = (uint32_t)timer_int & 0xffff;
    7fc9:	b8 4b 7e 00 00       	mov    $0x7e4b,%eax
    7fce:	66 a3 00 ca 00 00    	mov    %ax,0xca00
    idt_table[0x20].offset_h = (uint32_t)timer_int >> 16;
    7fd4:	b8 4b 7e 00 00       	mov    $0x7e4b,%eax
    7fd9:	c1 e8 10             	shr    $0x10,%eax
    7fdc:	66 a3 06 ca 00 00    	mov    %ax,0xca06
    idt_table[0x20].selector = KERNEL_CODE_SEG;
    7fe2:	66 c7 05 02 ca 00 00 	movw   $0x8,0xca02
    7fe9:	08 00 
    idt_table[0x20].attr     = 0x8e00;
    7feb:	66 c7 05 04 ca 00 00 	movw   $0x8e00,0xca04
    7ff2:	00 8e 

    gdt_table[TASK0_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task0_tss;
    7ff4:	b8 00 c0 00 00       	mov    $0xc000,%eax
    7ff9:	66 a3 12 c1 00 00    	mov    %ax,0xc112
    gdt_table[TASK1_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task1_tss;
    7fff:	b8 80 c0 00 00       	mov    $0xc080,%eax
    8004:	66 a3 1a c1 00 00    	mov    %ax,0xc11a



    pg_dir[MAP_ADDR >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    800a:	b8 00 a0 00 00       	mov    $0xa000,%eax
    800f:	83 c8 07             	or     $0x7,%eax
    8012:	a3 00 b8 00 00       	mov    %eax,0xb800
    page_table[(MAP_ADDR >> 12) & 0x3ff] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    8017:	b8 00 90 00 00       	mov    $0x9000,%eax
    801c:	83 c8 07             	or     $0x7,%eax
    801f:	a3 00 a0 00 00       	mov    %eax,0xa000
    
    pg_dir[TEST_ADDR >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    8024:	b8 00 a0 00 00       	mov    $0xa000,%eax
    8029:	83 c8 07             	or     $0x7,%eax
    802c:	a3 00 b7 00 00       	mov    %eax,0xb700
    page_table[(TEST_ADDR >> 12) & 0x3ff] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    8031:	b8 00 90 00 00       	mov    $0x9000,%eax
    8036:	83 c8 07             	or     $0x7,%eax
    8039:	a3 00 a0 00 00       	mov    %eax,0xa000

    pg_dir[TEST_ADDR_2 >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    803e:	b8 00 a0 00 00       	mov    $0xa000,%eax
    8043:	83 c8 07             	or     $0x7,%eax
    8046:	a3 20 b1 00 00       	mov    %eax,0xb120
    page_table[(TEST_ADDR_2 >> 12) & 0x3ff] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    804b:	b8 00 90 00 00       	mov    $0x9000,%eax
    8050:	83 c8 07             	or     $0x7,%eax
    8053:	a3 14 ad 00 00       	mov    %eax,0xad14

    uint32_t addr1 = TEST_ADDR;
    8058:	c7 45 f8 00 00 00 70 	movl   $0x70000000,-0x8(%ebp)
    *((uint32_t*)TEST_ADDR) = 66;
    805f:	b8 00 00 00 70       	mov    $0x70000000,%eax
    8064:	c7 00 42 00 00 00    	movl   $0x42,(%eax)
    map_phy_buffer[1] = 99;
    806a:	c6 05 01 90 00 00 63 	movb   $0x63,0x9001
    map_phy_buffer[2] = 88;
    8071:	c6 05 02 90 00 00 58 	movb   $0x58,0x9002
    8078:	90                   	nop
    8079:	c9                   	leave  
    807a:	c3                   	ret    
