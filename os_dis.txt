
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00000e00 memsz 0x00000e00 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000200  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000011  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000055  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000014  00000000  00000000  00000e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000046  00000000  00000000  00000ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_str    00000081  00000000  00000000  00000ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 start.o
00007c05 l       .text	00000000 offset
00000000 l    df *ABS*	00000000 os.c
00007c00 g       .text	00000000 _start
00008e00 g       .text	00000000 __bss_start
00008e00 g       .text	00000000 _edata
00008e00 g       .text	00000000 _end



Disassembly of section .text:

00007c00 <_start>:
  	.code16

	// 以下是代码区
 	.text
_start:
	jmp $0, $offset // qemu 会自动将cs设为0，也可以不用
    7c00:	ea                   	.byte 0xea
    7c01:	05                   	.byte 0x5
    7c02:	7c 00                	jl     7c04 <_start+0x4>
	...

00007c05 <offset>:

offset:
	mov $0,	%ax
    7c05:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c0a:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c0c:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c0e:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7c10:	8e e0                	mov    %eax,%fs

	jmp .
    7c12:	eb fe                	jmp    7c12 <offset+0xd>
	...
    7dfc:	00 00                	add    %al,(%eax)
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)
