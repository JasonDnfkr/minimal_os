
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00000ee8 memsz 0x00000ee8 flags r-x
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00003800 memsz 0x00003800 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002af  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000038  00007eb0  00007eb0  00000eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00003800  00008000  00008000  00001000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000011  00000000  00000000  00004800  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00004818  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000187  00000000  00000000  00004858  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d8  00000000  00000000  000049df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000a9  00000000  00000000  00004ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011b  00000000  00000000  00004b60  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00007eb0 l    d  .eh_frame	00000000 .eh_frame
00008000 l    d  .data	00000000 .data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 start.o
00007c00 l       .text	00000000 offset
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e32 l       .text	00000000 gdt_desc
00000000 l    df *ABS*	00000000 os.c
00009000 l     O .data	00001000 page_table
0000b000 g     O .data	00000800 gdt_table
00008000 g     O .data	00001000 map_phy_buffer
00007e38 g     F .text	00000077 os_init
00007c00 g       .text	00000000 _start
0000b800 g       .data	00000000 __bss_start
0000a000 g     O .data	00001000 pg_dir
0000b800 g       .data	00000000 _edata
0000b800 g       .data	00000000 _end



Disassembly of section .text:

00007c00 <_start>:
 	.text

_start:
# 	jmp $0, $offset // qemu 会自动将cs设为0，也可以不用
offset:
	mov $0,	%ax
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c09:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7c0b:	8e e0                	mov    %eax,%fs

	# 分配栈空间 由于bios会将硬盘第一个扇区的内容
	# 存放至内存0x7c00中，因此将代码开头的地址
	# 也就是_start的内容放入esp就可以设置栈指针的位置
	mov $_start, %esp
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:

read_self_all:
	mov $_start_32, %bx // 0x7c00 + 512
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx    # int 0x13: 起始扇区2
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax  # 读磁盘 ah:2  al:0x40 (64个扇区)
	mov $0x80, %dx   # 读第一个磁盘
    7c1e:	00 cd                	add    %cl,%ch

	int $0x13        # 中断：读取磁盘
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all

	cli				 # 关中断
    7c23:	fa                   	cli    

	lgdt gdt_desc    # load GDT
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	32 7e 66             	xor    0x66(%esi),%bh
	mov $1, %eax
    7c2a:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax         # CR0 = 1
    7c2f:	0f 01 f0             	lmsw   %ax

	jmp $KERNEL_CODE_SEG, $_start_32 # CS 设置为 KERNEL_CODE_SEG, 指向内核代码段
    7c32:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfd:	00 55 aa             	add    %dl,-0x56(%ebp)

00007e00 <_start_32>:

	.code32			 # 执行32位指令
	.text

_start_32:
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss

	mov $_start, %esp
    7e0a:	bc 00 7c 00 00       	mov    $0x7c00,%esp


	call os_init
    7e0f:	e8 24 00 00 00       	call   7e38 <os_init>
	mov $pg_dir, %eax
    7e14:	b8 00 a0 00 00       	mov    $0xa000,%eax
	mov %eax, %cr3   # 分页相关
    7e19:	0f 22 d8             	mov    %eax,%cr3

	mov %cr4, %eax
    7e1c:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax
    7e1f:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e22:	0f 22 e0             	mov    %eax,%cr4

	mov %cr0, %eax
    7e25:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax
    7e28:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e2d:	0f 22 c0             	mov    %eax,%cr0

	jmp .
    7e30:	eb fe                	jmp    7e30 <_start_32+0x30>

00007e32 <gdt_desc>:
    7e32:	ff 07                	incl   (%edi)
    7e34:	00                   	.byte 0x0
    7e35:	b0 00                	mov    $0x0,%al
	...

00007e38 <os_init>:
    [KERNEL_DATA_SEG / 8] = { 0xffff, 0x0000, 0x9200, 0x00cf },
};
 
#define TEST_ADDR 0x70000000
#define TEST_ADDR_2 0x12345678
void os_init(void) {
    7e38:	55                   	push   %ebp
    7e39:	89 e5                	mov    %esp,%ebp
    7e3b:	83 ec 10             	sub    $0x10,%esp
    pg_dir[MAP_ADDR >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    7e3e:	b8 00 90 00 00       	mov    $0x9000,%eax
    7e43:	83 c8 07             	or     $0x7,%eax
    7e46:	a3 00 a8 00 00       	mov    %eax,0xa800
    page_table[(MAP_ADDR >> 12) & 0x3ff] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    7e4b:	b8 00 80 00 00       	mov    $0x8000,%eax
    7e50:	83 c8 07             	or     $0x7,%eax
    7e53:	a3 00 90 00 00       	mov    %eax,0x9000
    
    pg_dir[TEST_ADDR >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    7e58:	b8 00 90 00 00       	mov    $0x9000,%eax
    7e5d:	83 c8 07             	or     $0x7,%eax
    7e60:	a3 00 a7 00 00       	mov    %eax,0xa700
    page_table[(TEST_ADDR >> 12) & 0x3ff] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    7e65:	b8 00 80 00 00       	mov    $0x8000,%eax
    7e6a:	83 c8 07             	or     $0x7,%eax
    7e6d:	a3 00 90 00 00       	mov    %eax,0x9000

    pg_dir[TEST_ADDR_2 >> 22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    7e72:	b8 00 90 00 00       	mov    $0x9000,%eax
    7e77:	83 c8 07             	or     $0x7,%eax
    7e7a:	a3 20 a1 00 00       	mov    %eax,0xa120
    page_table[(TEST_ADDR_2 >> 12) & 0x3ff] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    7e7f:	b8 00 80 00 00       	mov    $0x8000,%eax
    7e84:	83 c8 07             	or     $0x7,%eax
    7e87:	a3 14 9d 00 00       	mov    %eax,0x9d14

    uint32_t addr1 = TEST_ADDR;
    7e8c:	c7 45 fc 00 00 00 70 	movl   $0x70000000,-0x4(%ebp)
    *((uint32_t*)TEST_ADDR) = 66;
    7e93:	b8 00 00 00 70       	mov    $0x70000000,%eax
    7e98:	c7 00 42 00 00 00    	movl   $0x42,(%eax)
    map_phy_buffer[1] = 99;
    7e9e:	c6 05 01 80 00 00 63 	movb   $0x63,0x8001
    map_phy_buffer[2] = 88;
    7ea5:	c6 05 02 80 00 00 58 	movb   $0x58,0x8002
    7eac:	90                   	nop
    7ead:	c9                   	leave  
    7eae:	c3                   	ret    
